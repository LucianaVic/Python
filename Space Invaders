import turtle
import os
import math
import random
import platform

# Verificar o sistema operacional
if platform.system() == "Windows":
    import winsound

# Definir manualmente as dimensões da imagem de fundo
bg_width = 600
bg_height = 800

# Configurar a tela
wn = turtle.Screen()
wn.bgcolor("black")
wn.title("Space Invaders")

# Ajustar o tamanho da janela de acordo com a imagem de fundo
wn.setup(width=bg_width, height=bg_height)
wn.bgpic("galaxia.gif")

# Definir a pontuação para 0
score = 0

# Tirar o placar
score_pen = turtle.Turtle()
score_pen.speed(0)
score_pen.color("white")
score_pen.penup()
score_pen.setposition(-bg_width // 2 + 10, bg_height // 2 - 30)
scorestring = "Score: %s" % score
score_pen.write(scorestring, False, align="left", font=("Arial", 14, "normal"))
score_pen.hideturtle()

# Criar a tartaruga de jogo
player = turtle.Turtle()
player.color("blue")
player.shape("triangle")
player.penup()
player.speed(0)
player.setposition(0, -bg_height // 2 + 50)
player.setheading(90)

playerspeed = 15

# Escolher o número de inimigos
number_of_enemies = 5
# Criar uma lista vazia de inimigos
enemies = []

# Adicionar inimigos à lista
for i in range(number_of_enemies):
    enemies.append(turtle.Turtle())

for enemy in enemies:
    enemy.color("red")
    enemy.shape("circle")
    enemy.penup()
    enemy.speed(0)
    x = random.randint(-bg_width // 2 + 20, bg_width // 2 - 20)
    y = random.randint(100, bg_height // 2 - 20)
    enemy.setposition(x, y)

enemyspeed = 2

# Criar a bala do jogador
bullet = turtle.Turtle()
bullet.color("yellow")
bullet.shape("triangle")
bullet.penup()
bullet.speed(0)
bullet.setheading(90)
bullet.shapesize(0.5, 0.5)
bullet.hideturtle()

bulletspeed = 20

# Definir estado de marcador
# ready - pronto para disparar
# fire - bala está disparando
bulletstate = "ready"

# Controle de som
sound_on = True

# Função para tocar som de tiro
def play_shot_sound():
    if sound_on:
        if platform.system() == "Windows":
            winsound.PlaySound("tiro.wav", winsound.SND_ASYNC)
        else:
            os.system("afplay tiro.wav&")  # Para macOS
            os.system("aplay tiro.wav&")  # Para Linux

# Função para tocar som de colisão
def play_collision_sound():
    if sound_on:
        if platform.system() == "Windows":
            winsound.PlaySound("explosao.wav", winsound.SND_ASYNC)
        else:
            os.system("afplay explosao.wav&")  # Para macOS
            os.system("aplay explosao.wav&")  # Para Linux

# Função para ativar/desativar o som
def toggle_sound():
    global sound_on
    sound_on = not sound_on

# Movendo o jogador para a esquerda e direita
def move_left():
    x = player.xcor()
    x -= playerspeed
    if x < -bg_width // 2 + 20:
        x = -bg_width // 2 + 20
    player.setx(x)

def move_right():
    x = player.xcor()
    x += playerspeed
    if x > bg_width // 2 - 20:
        x = bg_width // 2 - 20
    player.setx(x)

def fire_bullet():
    global bulletstate
    if bulletstate == "ready":
        bulletstate = "fire"
        x = player.xcor()
        y = player.ycor() + 10
        bullet.setposition(x, y)
        bullet.showturtle()
        play_shot_sound()

def isCollision(t1, t2):
    distance = math.sqrt(math.pow(t1.xcor() - t2.xcor(), 2) + math.pow(t1.ycor() - t2.ycor(), 2))
    if distance < 15:
        return True
    else:
        return False

# Função para exibir o menu principal
def show_menu():
    menu_pen = turtle.Turtle()
    menu_pen.speed(0)
    menu_pen.color("white")
    menu_pen.penup()
    menu_pen.hideturtle()
    menu_pen.setposition(0, 0)
    menu_pen.write("Space Invaders\nPress 'P' to Play\nPress 'M' to Mute/Unmute", align="center", font=("Arial", 24, "normal"))

    def start_game():
        menu_pen.clear()
        turtle.onkey(None, "p")  # Desvincular a tecla 'p'
        main_game()  # Iniciar o jogo principal

    turtle.listen()
    turtle.onkey(start_game, "p")
    turtle.onkey(toggle_sound, "m")

# Função principal do jogo
def main_game():
    global bulletstate, score, enemies, player, bullet

    # Reiniciar o estado do jogo
    bulletstate = "ready"
    score = 0
    score_pen.clear()
    scorestring = "Score: %s" % score
    score_pen.write(scorestring, False, align="left", font=("Arial", 14, "normal"))

    # Reposicionar o jogador
    player.setposition(0, -bg_height // 2 + 50)
    player.showturtle()

    # Reposicionar e reexibir inimigos
    for enemy in enemies:
        x = random.randint(-bg_width // 2 + 20, bg_width // 2 - 20)
        y = random.randint(100, bg_height // 2 - 20)
        enemy.setposition(x, y)
        enemy.showturtle()

    # Reexibir a bala
    bullet.hideturtle()

    # Função para atualizar o jogo
    def game_loop():
        global enemyspeed, bulletstate, score

        for enemy in enemies:
            x = enemy.xcor()
            x += enemyspeed
            enemy.setx(x)

            if enemy.xcor() > bg_width // 2 - 20:
                for e in enemies:
                    y = e.ycor()
                    y -= 40
                    e.sety(y)
                enemyspeed *= -1

            if enemy.xcor() < -bg_width // 2 + 20:
                for e in enemies:
                    y = e.ycor()
                    y -= 40
                    e.sety(y)
                enemyspeed *= -1

            if isCollision(bullet, enemy):
                bullet.hideturtle()
                bulletstate = "ready"
                bullet.setposition(0, -400)
                x = random.randint(-bg_width // 2 + 20, bg_width // 2 - 20)
                y = random.randint(100, bg_height // 2 - 20)
                enemy.setposition(x, y)
                score += 10
                scorestring = "Score: %s" % score
                score_pen.clear()
                score_pen.write(scorestring, False, align="left", font=("Arial", 14, "normal"))
                play_collision_sound()

            if isCollision(player, enemy):
                player.hideturtle()
                enemy.hideturtle()
                show_game_over()
                return

            if enemy.ycor() < -bg_height // 2 + 50:
                player.hideturtle()
                enemy.hideturtle()
                show_game_over()
                return

        if bulletstate == "fire":
            y = bullet.ycor()
            y += bulletspeed
            bullet.sety(y)

        if bullet.ycor() > bg_height // 2 - 20:
            bullet.hideturtle()
            bulletstate = "ready"

        # Continuar o loop do jogo
        wn.ontimer(game_loop, 20)

    # Iniciar o loop do jogo
    game_loop()

# Função para exibir "Game Over"
def show_game_over():
    game_over_pen = turtle.Turtle()
    game_over_pen.speed(0)
    game_over_pen.color("red")
    game_over_pen.penup()
    game_over_pen.hideturtle()
    game_over_pen.setposition(0, 0)
    game_over_pen.write("Game Over", align="center", font=("Arial", 36, "normal"))
    
    def back_to_menu():
        game_over_pen.clear()
        show_menu()

    # Voltar ao menu inicial após 3 segundos
    wn.ontimer(back_to_menu, 3000)

# Mostrar o menu principal ao iniciar
show_menu()

# Criar ligação de teclado
turtle.listen()
turtle.onkey(move_left, "Left")
turtle.onkey(move_right, "Right")
turtle.onkey(fire_bullet, "space")
turtle.onkey(toggle_sound, "m")

turtle.mainloop()
